import { Database } from "sqlite";
import { getDb } from "../db.js";
import User from "../models/user.model.js";
import { stringUtils } from "../utils/string.util.js";


export default class UserDao {
  private db: Database;

  constructor() {
    this.db = getDb();
  }

  /**
   * Creates a new user in the database.
   * The 'id' is generated by the DAO, and 'created_at', 'updated_at' are
   * set by the database on insertion.
   * @param userData An object containing the username and hashed password.
   * @returns {Promise<User>} The full user object as stored in the database.
   * @throws {Error} If the database operation fails.
   */
  async createUser(user: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    const newId = stringUtils.generateId();
    const { username, password_hash } = user;

    try {
      // 1. Insert the new user record into the database
      await this.db.run(
        'INSERT INTO users (id, username, password_hash) VALUES (?, ?, ?)',
        newId,
        username,
        password_hash
      );

      // 2. Retrieve the complete user record from the database.
      const createdUser = await this.getUserById(newId);

      if (!createdUser) {
        throw new Error('Failed to retrieve newly created user after insertion.');
      }

      return createdUser;
    } catch (error) {
      console.error('Error creating user in UserDao:', error);
      throw error;
    }
  }

  /**
   * Finds a user by their id.
   * @param id The id of the User to find.
   * @returns {Promise<User | undefined>} The user object if found, otherwise undefined.
   */
  async getUserById(id: string): Promise<User | undefined> {
    try {
      const user = await this.db.get<User>(
        'SELECT id, username, password_hash, created_at, updated_at FROM users WHERE id = ?',
        id
      );
      return user;
    } catch (error) {
      console.error('Error finding user by id in UserDao:', error);
      throw error;
    }
  }

  /**
   * Finds a user by their username. Used for checking uniqueness during registration
   * and for login operations.
   * @param username The username to find.
   * @returns {Promise<User | undefined>} The user object if found, otherwise undefined.
   */
  async getUserByUsername(username: string): Promise<User | undefined> {
    try {
      const user = await this.db.get<User>(
        'SELECT id, username, password_hash, created_at, updated_at FROM users WHERE username = ?',
        username
      );
      return user;
    } catch (error) {
      console.error('Error finding user by username in UserDao:', error);
      throw error;
    }
  }
}